{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\web\\\\Web2020-FinalProject\\\\frontend\\\\src\\\\MainArea.js\",\n    _s = $RefreshSig$();\n\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { Location } from './components/Location';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { defaultData, getLocationData } from './Connection';\nimport { Empty } from './components/Empty';\nimport { ShelfGrid } from './components/ShelfGrid';\nimport { Loading } from './components/Loading';\nimport { useSnackbar } from 'notistack';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  }\n}));\nexport default function MainArea() {\n  _s();\n\n  const classes = useStyles(); // const { currentPath } = useParams();\n\n  let location = useLocation();\n  const [pageData, setPageData] = useState(defaultData);\n  const [path, setPath] = useState(location.pathname);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  let history = useHistory();\n\n  const updatePageData = async () => {\n    setPath(history.location.pathname);\n    console.log(\"UpdatePageData:\", history.location.pathname); // enqueueSnackbar(\"Loading ...\");\n\n    const {\n      status,\n      data\n    } = await getLocationData(history.location.pathname);\n\n    if (status === \"success\") {\n      setPageData(data);\n    } else {\n      console.log(\"error in update pageData\");\n      console.log(JSON.stringify(data));\n      enqueueSnackbar(data, {\n        variant: \"error\"\n      });\n      enqueueSnackbar(\"Redirected to home.\", {\n        variant: \"info\"\n      });\n      history.push(\"/\");\n    }\n  }; // useEffect(() => {\n  // }, [])\n\n\n  useEffect(() => {\n    setPath(history.location.pathname);\n    updatePageData();\n    history.listen(() => {\n      updatePageData();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.content,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.toolbar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), pageData.template === \"Location\" ? /*#__PURE__*/_jsxDEV(Location, {\n      path: path,\n      pageData: pageData,\n      getData: () => {\n        updatePageData();\n      },\n      setData: setPageData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : pageData.template === \"ShelfTable\" ? /*#__PURE__*/_jsxDEV(ShelfGrid, {\n      path: path,\n      pageData: pageData,\n      getData: () => {\n        updatePageData();\n      },\n      setData: setPageData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : pageData.template === \"Empty\" ? /*#__PURE__*/_jsxDEV(Empty, {\n      path: path,\n      pageData: pageData,\n      getData: () => {\n        updatePageData();\n      },\n      setData: setPageData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Loading, {\n      path: path,\n      pageData: pageData,\n      getData: () => {\n        updatePageData();\n      },\n      setData: setPageData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainArea, \"pFY52I9acbiAvyXU/DpmM2XpPms=\", false, function () {\n  return [useStyles, useLocation, useSnackbar, useHistory];\n});\n\n_c = MainArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainArea\");","map":{"version":3,"sources":["C:/web/Web2020-FinalProject/frontend/src/MainArea.js"],"names":["useLocation","useHistory","useEffect","useState","Location","makeStyles","defaultData","getLocationData","Empty","ShelfGrid","Loading","useSnackbar","useStyles","theme","root","display","toolbar","alignItems","justifyContent","padding","spacing","mixins","content","flexGrow","MainArea","classes","location","pageData","setPageData","path","setPath","pathname","enqueueSnackbar","history","updatePageData","console","log","status","data","JSON","stringify","variant","push","listen","template"],"mappings":"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","sourcesContent":["import { useLocation, useHistory } from \"react-router-dom\"\r\nimport { useEffect, useState } from 'react'\r\nimport { Location } from './components/Location'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { defaultData, getLocationData } from './Connection'\r\nimport { Empty } from './components/Empty'\r\nimport { ShelfGrid } from './components/ShelfGrid'\r\nimport { Loading } from './components/Loading'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function MainArea() {\r\n  const classes = useStyles();\r\n  // const { currentPath } = useParams();\r\n  let location = useLocation();\r\n  const [pageData, setPageData] = useState(defaultData);\r\n  const [path, setPath] = useState(location.pathname);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  let history = useHistory();\r\n\r\n  const updatePageData = async () => {\r\n    setPath(history.location.pathname);\r\n    console.log(\"UpdatePageData:\", history.location.pathname)\r\n    // enqueueSnackbar(\"Loading ...\");\r\n    const {status, data} = await getLocationData(history.location.pathname);\r\n    if (status === \"success\") {\r\n      setPageData(data);\r\n    }\r\n    else {\r\n      console.log(\"error in update pageData\")\r\n      console.log(JSON.stringify(data));\r\n      enqueueSnackbar(data, { variant: \"error\" });\r\n      enqueueSnackbar(\"Redirected to home.\", { variant: \"info\" })\r\n      history.push(\"/\")\r\n    }\r\n  }\r\n\r\n  // useEffect(() => {\r\n  // }, [])\r\n\r\n  useEffect(() => {\r\n    setPath(history.location.pathname);\r\n    updatePageData();\r\n    history.listen(()=>{\r\n      updatePageData()\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      <div className={classes.toolbar} />\r\n      {pageData.template === \"Location\" ? (\r\n        <Location\r\n          path={path}\r\n          pageData={pageData}\r\n          getData={() => {updatePageData()}}\r\n          setData={setPageData} />\r\n      ) : pageData.template === \"ShelfTable\" ? (\r\n        <ShelfGrid\r\n          path={path}\r\n          pageData={pageData}\r\n          getData={() => {updatePageData()}}\r\n          setData={setPageData} />\r\n      ) : pageData.template === \"Empty\" ? (\r\n        <Empty\r\n          path={path}\r\n          pageData={pageData}\r\n          getData={() => {updatePageData()}}\r\n          setData={setPageData} />\r\n      ) : (\r\n        <Loading\r\n          path={path}\r\n          pageData={pageData}\r\n          getData={() => {updatePageData()}}\r\n          setData={setPageData} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}