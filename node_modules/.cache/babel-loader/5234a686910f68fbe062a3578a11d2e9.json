{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\web\\\\Web2020-FinalProject\\\\frontend\\\\src\\\\components\\\\ShelfGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Typography, Button } from '@material-ui/core';\nimport { AddItemDialog } from './AddItem';\nimport { defaultData } from '../Connection';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1),\n      width: theme.spacing(16),\n      height: theme.spacing(16)\n    }\n  }\n}));\nexport function ShelfGrid(props) {\n  _s();\n\n  const classes = useStyles();\n  let pageData = props.pageData;\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [dialogRef, setDialogRef] = useState(null);\n  const columns = [{\n    field: 'name',\n    headerName: 'Name',\n    width: 130\n  }, {\n    field: 'owner',\n    headerName: 'Owner',\n    width: 130\n  }, {\n    field: 'time',\n    headerName: 'Time',\n    type: 'dateTime',\n    width: 200\n  }, {\n    field: 'description',\n    headerName: 'Description',\n    sortable: false,\n    width: 160\n  }, {\n    field: 'id',\n    headerName: 'ID',\n    width: 70,\n    description: 'Unique id for each item'\n  }];\n\n  const getData = async () => {\n    props.setData(await props.getData(props.path));\n    console.log(pageData);\n  };\n\n  useEffect(() => {\n    getData(props.path);\n  }, [props.path, dialogOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: pageData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: pageData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          setDialogOpen(true);\n        },\n        children: \"Add item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddItemDialog, {\n        onClose: () => {\n          setDialogOpen(false);\n        },\n        open: dialogOpen,\n        currentPath: pageData.path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: pageData.itemlist,\n      columns: columns,\n      checkboxSelection: true,\n      autoHeight: true,\n      autoPageSize: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ShelfGrid, \"Z1XLWYqXAhlZ+gQZvvJU6gAh9WA=\", false, function () {\n  return [useStyles];\n});\n\n_c = ShelfGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShelfGrid\");","map":{"version":3,"sources":["C:/web/Web2020-FinalProject/frontend/src/components/ShelfGrid.js"],"names":["React","useEffect","useState","makeStyles","DataGrid","Typography","Button","AddItemDialog","defaultData","useStyles","theme","root","display","flexWrap","margin","spacing","width","height","ShelfGrid","props","classes","pageData","dialogOpen","setDialogOpen","dialogRef","setDialogRef","columns","field","headerName","type","sortable","description","getData","setData","path","console","log","title","itemlist"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { \r\n  DataGrid\r\n} from '@material-ui/data-grid'\r\nimport { Typography, Button } from '@material-ui/core'\r\nimport { AddItemDialog } from './AddItem';\r\nimport { defaultData } from '../Connection';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(16),\r\n      height: theme.spacing(16),\r\n    },\r\n  },\r\n}));\r\n\r\nexport function ShelfGrid(props){\r\n  const classes = useStyles();\r\n  let pageData = props.pageData;\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogRef, setDialogRef] = useState(null)\r\n\r\n  const columns = [\r\n    { field: 'name', headerName: 'Name', width: 130 },\r\n    { field: 'owner', headerName: 'Owner', width: 130 },\r\n    {\r\n      field: 'time',\r\n      headerName: 'Time',\r\n      type: 'dateTime',\r\n      width: 200,\r\n    },\r\n    {\r\n      field: 'description',\r\n      headerName: 'Description',\r\n      sortable: false,\r\n      width: 160,\r\n    },\r\n    { field: 'id', headerName: 'ID', width: 70, description: 'Unique id for each item' },\r\n  ];\r\n\r\n  const getData = async ()=>{\r\n    props.setData(await props.getData(props.path));\r\n    console.log(pageData);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getData(props.path);\r\n  }, [props.path, dialogOpen])\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Typography variant=\"h3\">{pageData.title}</Typography>\r\n        <Typography >{pageData.description}</Typography>\r\n        <Button onClick={()=>{setDialogOpen(true)}}>Add item</Button>\r\n        <AddItemDialog \r\n          onClose={()=>{setDialogOpen(false)}} \r\n          open={dialogOpen} \r\n          currentPath={pageData.path} />\r\n      </div>\r\n        <DataGrid \r\n          rows={pageData.itemlist} \r\n          columns={columns} \r\n          checkboxSelection \r\n          autoHeight \r\n          autoPageSize />\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}